(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{245:function(e,n,t){"use strict";t.r(n);var s=t(0),i=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"通过队列和栈实现深度优先遍历和广度优先遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过队列和栈实现深度优先遍历和广度优先遍历"}},[e._v("#")]),e._v(" 通过队列和栈实现深度优先遍历和广度优先遍历")]),e._v(" "),t("p",[e._v("深度优先：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("Dfs1（node,res=[]）{\n    // 递归\n    res.push(node);\n    if(node.children){\n        for (let i = 0; i < node.children.length; i++) {\n            Dfs1(node.children[i],res);\n          }\n    }\n    return res\n}\n\n Dfs2(node) {\n// 深度用栈，先进后出\nlet stack = [node];\nlet res = [];\nwhile (stack.length) {\n  let item = stack.pop();\n  res.push(item);\n  for (let i = item.children.length - 1; i > 0; i--) {\n    stack.push(item.children[i]);\n  }\n}\nreturn stack;\n}\n")])])]),t("p",[e._v("广度优先：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("  Bfs(node) {\n    // 队列先进先出\n    let queue = [node];\n    let res = [];\n    while (queue.length) {\n      let item = queue.shift();\n      res.push(item);\n      for (let i = 0; i < item.children.length; i++) {\n        queue.push(item.children[i]);\n      }\n    }\n    return queue;\n  }\n")])])])])}),[],!1,null,null,null);n.default=i.exports}}]);